function mendeley_bib_clean(bib_path, opts)
% Removes "fields" from a given .bib file for cleaner references
% 
% TODO: Replace journal names with abbreviations
% 
% Inputs:
%     bib_path : full path of .bib file (generated by mendeley)
%     opts.print : cell array of fields which will be printed
% 

opts_default = struct('print',{{}});

if nargin < 2
    opts = [];
end
opts = bia.utils.updatefields(opts_default, opts);
fields_print = fix(opts.print);% prints these fields in display    

% single line fields
fields = fix({'mendeley-tags'; 'keywords'; 'file'; ...% mendeley's own fields
    'month'; 'pages'; 'address'; 'language'; ...% useless fields
    'shorttitle'; 'eprint'; 'archivePrefix';'arxivId'; ...
    'doi'; 'issn'; 'pmid'; 'url'
    'number'; 'volume'; 'editor'; 'publisher'; 'series';...
    %'author'; 'title'; 'year'; 'booktitle'; ...% uncomment these to spot irregularities in the .bib file
    });
% multi-line fields: tags which MAY span multiple lines
fields2 =  fix({'abstract'; 'annote'; 'isbn'});

if exist(bib_path, 'file') == 7
    bib_path = bia.utils.rm_path_lastslash(bib_path);
    list = dir([bib_path, filesep, '*.bib']);
    if isempty(list)
        fprintf('No .bib file found in: %s', bib_path);
        return
    else
        N = length(list);
        bib_paths = cell(N, 1);
        for i=1:N
            bib_paths{i,1} = fullfile(bib_path, list(i).name);
        end
    end
else
    bib_paths{1,1} = bib_path;
end

for k=1:length(bib_paths)
    bib_path = bib_paths{k};
    f     = fopen(bib_path, 'r');
    tline = fgets(f);
    lines = cell(0);
    lines{end+1} = tline;
    start = 0;% to track multi-line fields
    found = 0;
    arxiv_book = '';
    while ischar(tline)
        tline = fgets(f);
        if ischar(tline)
            if contains(tline, {'@article{','@inproceedings{'})
                found = 0;
                arxiv_book = '';
            elseif strcmp(tline, sprintf('}\n')) && found == 0 && ~isempty(arxiv_book)
                lines{end} = strrep(lines{end}, sprintf('\n'), sprintf(',\n'));
                lines{end+1} = arxiv_book;
            end
            if contains(tline, 'arxivId')
               arxiv_book = get_arxivid(tline);
            end
            if ~contains(tline, fields)
                if start == 1 || contains(tline, fields2)
                    start = 1;
                elseif contains(tline, {'journal = {', 'booktitle = {'})
                    [tline,found] = fix_conf_names(tline);
                    lines{end+1} = tline;
                else
                    lines{end+1} = tline;
                end
                if start == 1 && contains(tline, '},')
                    start = 0;
                end
                if contains(tline, fields_print)
                    fprintf('%s', tline)
                end
            end
        end
    end
    fclose(f);

	% save the clean .bib file
    f = fopen(bib_path, 'w+');
    for i=1:length(lines)
        fprintf(f, '%s', lines{i});
    end
    fclose(f);
end
end


function fields = fix(fields)
% adds the ' = {' character to ensure that pattern detects start of these fields
if ischar(fields)
   fields = {fields}; 
end
for i=1:length(fields)
    fields{i} = [fields{i}, ' = {'];
end

end


function [s, found] = fix_conf_names(s)
% https://www.ieee.org/documents/trans_journal_names.pdf
sl = lower(s);
%{
'Proceedings of the 13th International Conference on Artificial Intelligence and Statistics (AISTATS)', 'AISTATS'
'Bayesian and grAphical Models for Biomedical Imaging (MICCAI Workshop)'
% remove arxiv ids from CVPR/ICCV/Nat Biotech papers
%}
conf = '';
found = 0;
if contains(sl, {'pami','ieee transactions on pattern analysis and machine intelligence'})
    conf = 'T-PAMI';
elseif contains(sl, 'ieee transactions on medical imaging')
    conf = 'T-MI';
elseif contains(sl, 'ieee transactions on image processing')
    conf = 'T-IP';
elseif contains(sl, 'international journal of computer vision')
    conf = 'IJCV';
elseif contains(sl, 'medical image analysis')
    conf = 'Medical Image Analysis';
elseif contains(sl, {'ieee workshop on applications of computer vision','ieee winter conference on applications of computer vision'})
    conf = 'WACV';
elseif contains(sl, {'isbi','international symposium on biomedical imaging', 'biomedical imaging: from nano to macro'})
    conf = 'ISBI';
elseif contains(sl, {'icip','ieee international conference on image processing'})
    conf = 'ICIP';
elseif contains(sl, {'cvpr','ieee conference on computer vision and pattern recognition', 'ieee computer society conference on computer vision and pattern recognition'}) && ~contains(sl, 'workshop')
    conf = 'CVPR';
elseif contains(sl, {'iccv','international conference on computer vision'}) && ~contains(sl, 'workshop')
    conf = 'ICCV';
elseif contains(sl, 'international conference on artificial intelligence and statistics') && ~contains(sl, 'workshop')
    conf = 'AISTATS';
elseif contains(sl, 'plos one')
    conf = 'PLoS ONE';
elseif contains(sl, 'bmc bioinformatics')
    conf = 'BMC Bioinformatics';
elseif contains(sl, 'bioinformatics')
    conf = 'Bioinformatics';
elseif contains(sl, 'accv') && ~contains(sl, 'workshop')
    conf = 'ACCV';
elseif contains(sl, 'eccv') && ~contains(sl, 'workshop')
    conf = 'ECCV';
elseif contains(sl, 'miccai') && ~contains(sl, 'workshop')
    conf = 'MICCAI';
elseif contains(sl, 'isbi') && ~contains(sl, 'workshop')
    conf = 'ISBI';
elseif contains(sl, 'bayesian and graphical models for biomedical imaging')% && ~contains(sl, 'workshop')
    conf = 'BAMBI (MICCAI-W)';
elseif contains(sl, 'dlmia') || contains(sl, 'workshop')
    conf = 'DLMIA (MICCAI-W)';
else
%     fprintf('Old: Not Found: %s\n',sl)
% elseif contains(sl, '')
%     conf = '';
% elseif contains(sl, '')
%     conf = '';
% elseif contains(sl, '')
%     conf = '';
end

if contains(sl, 'booktitle = {')
    pub = 'booktitle';
elseif contains(sl, 'journal = {')
    pub = 'journal';
else
    fprintf('TYpe error: %s\n',sl)
    return
end

if ~isempty(conf)
    found = 1;
%     fprintf('old: %s\n',s)
    s = sprintf('%s = {%s},\n', pub, conf);
%     fprintf('New: %s\n',s)
end
end


function s = get_arxivid(s)
if contains(s, 'arxivId = {')
    s2 = strrep(s,'arXiv:','');
    id = sscanf(s2,'arxivId = {%[0-9.v]},');
    s = sprintf('journal = {arXiv:%s}\n', id);
end
end